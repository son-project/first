

EKS 환경을 통한 Nginx 서비스 배포 및
Grafana, InfluxDB, Kapacitor연동 구성을 통한 서비스 모니터링 실습





 



목차




 1. EKS 설치 구성 및 Nginx 서비스 배포

 2. Grafana,
     InfluxDB, Kapacitor연동 구성

 3. Jmeter를 통한 부하, 성능 검증

EKS 활용한 구성 실습목차1. EKS 설치 및 구성 1.1. Terraform을 활용한 EKS 배포
1.2. Kubectl 명령어 수행을 위한 사전 작업
1.3. Kubectl 명령어를 활용한 EKS 구성
1.4. EKS에 서비스 배포
옵션. Kubernetes 대시보드 설정
1. EKS 설치 및 구성1.1. Terraform을 활용한 EKS 배포Terraform을 이용하여 EKS 마스터 와 노드들을 생성

Cloud9에 접속 후 다음 명령을 이용하여 5주차 실습 디렉토리 생성 및 최신 Sample 소스를 다운로드

$ cd ~/environment
mkdir week5 && cd week5
git clone http://18.136.34.219/devops/sample.git

5주차 실습 Terraform 디렉토리에 Terraform 파일을 다운로드

$ cd sample/monitoring/terraform
$ wget https://s3.amazonaws.com/fccpb/terraform_0.11.8_linux_amd64.zip
$ unzip terraform_0.11.8_linux_amd64.zip

Terraform 디렉토리의 variable.tf 내용을 수정

variable "cluster-name" {
  default = "name-eks-demo"
  type    = "string"
}

Terraform을 실행하여 적용

$ ./terraform init
$ ./terraform apply

모든 명령이 중료되면 다음과 같은 결과 확인

만약 output 정보를 다시 보고 싶다면 다음 명령을 수행

$ ./terraform output

1.2. Kubectl 명령어 수행을 위한 사전 작업kubectl-server의 주소로 접속 ID/PW = devops/DevOps12#

kubectl 실행 서버에 AWS Credential key 설정 (기존에 Cloud9에 설정된 값과 동일)

$ sudo su - 
# aws configure
AWS Access Key ID [None]: AKIAIHOEWK4MV26DQTPA
AWS Secret Access Key [None]: 1Z
Default region name [None]: us-west-2

동작 확인 

# aws eks describe-cluster --name name-eks-demo  --query cluster.endpoint
"https://22E7B0977A372880C4C50822314A34AF.sk1.us-west-2.eks.amazonaws.com"

kubeconfig 설정(terraform output 된 kubeconfig값을 복사)

# mkdir ~/.kube
# vim ~/.kube/kubeconfig
# export KUBECONFIG=$KUBECONFIG:~/.kube/kubeconfig 
# echo 'export KUBECONFIG=$KUBECONFIG:~/.kube/kubeconfig' >> ~/.bashrc
# source ~/.bashrc 

kubectl 동작 확인 

# kubectl get svc
NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
kubernetes   ClusterIP   172.20.0.1   <none>        443/TCP   1h

1.3. Kubectl 명령어를 활용한 EKS 구성aws의 auth configmap 설정(terraform output 된 config-map-aws-auth값을 복사) 

# vim aws-auth-cm.yaml 
# kubectl apply -f aws-auth-cm.yaml 

# kubectl get nodes
    No resources found.

# kubectl get nodes --watch 
NAME                                       STATUS     ROLES     AGE       VERSION
ip-10-0-1-214.us-west-2.compute.internal   NotReady   <none>    0s        v1.10.3
ip-10-0-1-214.us-west-2.compute.internal   NotReady   <none>    0s        v1.10.3
ip-10-0-1-214.us-west-2.compute.internal   NotReady   <none>    10s       v1.10.3
ip-10-0-0-16.us-west-2.compute.internal   NotReady   <none>    10s       v1.10.3
ip-10-0-1-214.us-west-2.compute.internal   NotReady   <none>    20s       v1.10.3
ip-10-0-0-16.us-west-2.compute.internal   NotReady   <none>    20s       v1.10.3
ip-10-0-1-214.us-west-2.compute.internal   Ready     <none>    30s       v1.10.3
ip-10-0-0-16.us-west-2.compute.internal   Ready     <none>    30s       v1.10.3
ip-10-0-1-214.us-west-2.compute.internal   Ready     <none>    40s       v1.10.3

# kubectl get nodes
NAME                                       STATUS    ROLES     AGE       VERSION
ip-10-0-0-16.us-west-2.compute.internal    Ready     <none>    39s       v1.10.3
ip-10-0-1-214.us-west-2.compute.internal   Ready     <none>    44s       v1.10.3

1.4. EKS에 서비스 배포EKS에 Heapster(Montioring), Nginx, Redis 서비스 배포


# cd deployments

# pwd
/root/deployments

# ls 
flask-deployment.yaml  frontend-deployment.yaml  heapster-rbac.yaml  nginx-deployment.yaml  redis-master-deployment.yaml  redis-slave-deployment.yaml
flask-service.yaml     frontend-service.yaml     heapster.yaml       nginx-service.yaml     redis-master-service.yaml     redis-slave-service.yaml

# kubectl apply -f heapster.yaml 
serviceaccount "heapster" created
deployment.extensions "heapster" created
service "heapster" created

# kubectl apply -f heapster-rbac.yaml 
clusterrolebinding.rbac.authorization.k8s.io "heapster" configured

# kubectl apply -f redis-master-deployment.yaml 
deployment.apps "redis-master" created

# kubectl apply -f redis-slave-deployment.yaml 
deployment.apps "redis-slave" created

# kubectl apply -f redis-master-service.yaml 
service "redis-master" created

# kubectl apply -f redis-slave-service.yaml 
service "redis-slave" created

# kubectl get pod 
NAME                            READY     STATUS    RESTARTS   AGE
redis-master-55db5f7567-25cjz   1/1       Running   0          29s
redis-slave-584c66c5b5-6xg6d    1/1       Running   0          20s
redis-slave-584c66c5b5-v5bdx    1/1       Running   0          20s

# kubectl apply -f flask-deployment.yaml 
deployment.apps "devops-deployment" created

# kubectl apply -f flask-service.yaml 
service "flask-service" created

# kubectl get pod 
NAME                            READY     STATUS              RESTARTS   AGE
devops-deployment-79698b597b-7l4jj   2/2       Running   0          11s
devops-deployment-79698b597b-hf8c8   2/2       Running   0          11s
devops-deployment-79698b597b-r9ptn   2/2       Running   0          11s
redis-master-55db5f7567-6nft2        1/1       Running   1          6h
redis-slave-584c66c5b5-cn6hm         1/1       Running   1          6h
redis-slave-584c66c5b5-k5w6s         1/1       Running   1          6h

# kubectl get svc -o wide
NAME           TYPE           CLUSTER-IP       EXTERNAL-IP                                                              PORT(S)           AGE       SELECTOR
flask-service   LoadBalancer   172.20.205.3    a3e7f1fddb7ea11e8bf690696f8dc573-650884976.us-west-2.elb.amazonaws.com   80:31128/TCP      36s       app=devops
kubernetes     ClusterIP      172.20.0.1       <none>                                                                   443/TCP           2h        <none>
redis-master   ClusterIP      172.20.101.78    <none>                                                                   6379/TCP          43s       app=redis,role=master,tier=backend
redis-slave    ClusterIP      172.20.118.165   <none>                                                                   6379/TCP          35s       app=redis,role=slave,tier=backend

ALB 접속 Example:

옵션. EKS에 Kubernetes 대시보드 설정 및 접속접속 장비(Desktop)에서 SSH Tunneling

$ ssh -i kc-oregon-key.pem -L 8001:localhost:8001 ec2-user@34.219.137.179

Kuberentes에 Dashboard 서비스 연동

Link: 자습서-Kubernetes 웹 UI 배포

